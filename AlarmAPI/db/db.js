const nano = require('nano');
const Alarm = require("../entity/Alarm");

// "http://%s:%s@%s:5984/authentication", os.Getenv("DB_USER"), os.Getenv("DB_PASSWORD"), os.Getenv("DB_HOST")
const url = `http://${process.env.DB_USER}:${process.env.DB_PASSWORD}@${process.env.DB_HOST}:5984`
const connection = nano(url)

module.exports = {
    /**
     * Finds the oauth tokens saved in the database by the code generated by the auth server
     *
     * @param{string} code string that represents the code returned by the auth server
     * @param{function(err, token)} next function that takes a parameter for eventual error and for the token saved in the database according to the code
     * */
    getTokenByCode: (code, next) => {
        connection
            .use("authentication")
            .find({
                selector: {
                    "_id": {
                        "$eq": code
                    }
                }
            }, (err, result) => {
                if (err) {
                    console.log(err);
                    next(err, null);
                } else {
                    if (result.docs.length <= 0) {
                        next(err, null);
                    } else {
                        next(err, result.docs[0]);
                    }
                }
            });
    },

    /**
     *
     * @param {function(err, object[])} next Callback which takes an error and the result set of alarms
     */
    getAlarms: (next) => {
        connection
            .use("alarm")
            .find({
                selector: {
                    "_id": {
                        "$gt": null
                    }
                }
            }, (err, result) => {
                if (err) {
                    console.log(err);
                }
                if (!result) {
                    next(err, []);
                } else {
                    next(err, result.docs);
                }
            })
    },
    /**
     * @param {Alarm} alarm
     * @param {function(err, object)} next
     */
    postAlarm: (alarm, next) => {
        if (alarm._id || alarm._rev) {
            delete alarm._id;
            delete alarm._rev;
        }

       connection
           .use("alarm")
           .insert(alarm, (err, result) => {
               if (err) {
                   console.log(err);
               }

               if (!result || !result.ok) {
                   next(err, null);
               } else {
                   next(err, result);
               }

           })
    },

    /**
     *
     * @param {Alarm} alarm
     * @param {function(err, object)} next
     */
    putAlarm: (alarm, next) => {
        connection
            .use("alarm")
            .find({
                selector: {
                    _id: {
                        "$eq": alarm._id
                    }
                }
            }, (err, result) => {
                if (err) {
                    console.log(err);
                }
                if (!result || !result.docs || result.docs.length <= 0) {
                    next(err, null);
                    return;
                }

                const toUpdate = new Alarm(result.docs[0]);
                if (alarm.hour) {
                    toUpdate.hour = alarm.hour;
                }
                if (alarm.minute) {
                    toUpdate.minute = alarm.minute;
                }
                if (alarm.days) {
                    toUpdate.days = alarm.days;
                }

                connection
                    .use("alarm")
                    .insert(toUpdate, (err, result) => {
                       if (err) {
                           console.log(err);
                       }
                       next(err, result);
                    });
            })
    },

    /**
     *
     * @param {string} id
     * @param {function(error, result)} next
     */
    deleteAlarm: (id, next) => {
        connection
            .use("alarm")
            .find({
                selector: {
                    _id: {
                        "$eq": id
                    }
                }
            }, (err, result) => {
                if (err) {
                    console.log(err);
                }
                if (!result || !result.docs || result.docs.length <= 0) {
                    next(err, result)
                    return;
                }

                connection
                    .use("alarm")
                    .destroy(result.docs[0]._id, result.docs[0]._rev, (err, result) => {
                        if (err) {
                            console.log(err);
                        }
                        next(err, result);
                    });
            });
    }
}